{
  "openapi": "3.0.0",
  "x-stoplight": {
    "id": "08wxz99j4pjvw"
  },
  "info": {
    "title": "ezReeport API",
    "version": "1.0",
    "contact": {
      "name": "ezTeam",
      "url": "https://github.com/ezpaarse-project",
      "email": "ezpaarse@couperin.org"
    },
    "license": {
      "name": "CeCILL",
      "url": "https://github.com/ezpaarse-project/ezreeport/blob/master/LICENSE.txt"
    },
    "description": "Reporting service"
  },
  "servers": [
    {
      "url": "http://localhost:8080/v1",
      "description": "Dev"
    },
    {
      "url": "https://ezmesure-preprod.couperin.org/report/api/v1",
      "description": "Pre-Prod"
    }
  ],
  "paths": {
    "/health": {
      "get": {
        "summary": "Get pingables services",
        "tags": [
          "health"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "integer"
                        },
                        "message": {
                          "type": "string"
                        }
                      }
                    },
                    "content": {
                      "type": "object",
                      "properties": {
                        "current": {
                          "type": "string"
                        },
                        "services": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "status": {
                        "code": 200,
                        "message": "OK"
                      },
                      "content": {
                        "current": "ezreeport-report",
                        "services": [
                          "ezreeport-report",
                          "elastic"
                        ]
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "value": {
                      "status": {
                        "code": 200,
                        "message": "OK"
                      },
                      "content": {
                        "current": "ezreeport-report",
                        "services": [
                          "ezreeport-report",
                          "elastic"
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "operationId": "health-get",
        "description": "Check services that current one can ping"
      }
    },
    "/health/all": {
      "get": {
        "summary": "Ping all services",
        "tags": [
          "health"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "x-examples": {
                    "example-1": {
                      "status": {
                        "code": 200,
                        "message": "OK"
                      },
                      "content": [
                        {
                          "name": "ezreeport-report",
                          "success": true,
                          "time": 3,
                          "timeout": false
                        },
                        {
                          "name": "elastic",
                          "success": true,
                          "time": 14,
                          "timeout": false
                        }
                      ]
                    }
                  },
                  "properties": {
                    "status": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "integer"
                        },
                        "message": {
                          "type": "string"
                        }
                      }
                    },
                    "content": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Pong"
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "value": {
                      "status": {
                        "code": 200,
                        "message": "OK"
                      },
                      "content": [
                        {
                          "name": "ezreeport-report",
                          "status": true,
                          "elapsedTime": 3,
                          "statusCode": 200
                        },
                        {
                          "name": "elastic",
                          "status": false,
                          "elapsedTime": 1000,
                          "statusCode": null
                        },
                        {
                          "name": "error",
                          "status": false,
                          "error": "timed out"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "operationId": "health-get-all",
        "description": "Ping all services (himself included)"
      },
      "parameters": []
    },
    "/health/{service}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "service",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Ping specific service",
        "tags": [
          "health"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "integer"
                        },
                        "message": {
                          "type": "string"
                        }
                      }
                    },
                    "content": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string"
                        },
                        "success": {
                          "type": "boolean"
                        },
                        "time": {
                          "type": "integer"
                        },
                        "timeout": {
                          "type": "boolean"
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "status": {
                        "code": 200,
                        "message": "OK"
                      },
                      "content": {
                        "name": "elastic",
                        "success": true,
                        "time": 9,
                        "timeout": false
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "value": {
                      "status": {
                        "code": 200,
                        "message": "OK"
                      },
                      "content": {
                        "name": "elastic",
                        "status": true,
                        "elapsedTime": 35,
                        "statusCode": 200
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "operationId": "health-get-service",
        "description": "Ping specific service"
      }
    },
    "/tasks": {
      "get": {
        "summary": "Get all tasks",
        "tags": [
          "tasks"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "x-examples": {
                    "example-1": {
                      "status": {
                        "code": 200,
                        "message": "OK"
                      },
                      "content": [
                        {
                          "id": "0000a00a-aaa0-0000-a0aa-000a0a0aa000",
                          "institution": "institution:aaaa0000-0000-00aa-aa00-aa00a0aa000a",
                          "layout": {
                            "...": "..."
                          },
                          "targets": [
                            "..."
                          ],
                          "recurrence": "WEEKLY",
                          "nextRun": "2022-10-31T10:00:00.000Z",
                          "enabled": true,
                          "history": [
                            {
                              "type": "creation",
                              "message": "La tâche a été créée par ..."
                            }
                          ],
                          "createdAt": "2022-10-25T11:55:47.375Z",
                          "updatedAt": "2022-10-25T11:55:47.375Z"
                        }
                      ],
                      "meta": {
                        "count": 1,
                        "lastId": "4359c49b-cde2-4330-b9aa-790f8c6cc840"
                      }
                    }
                  },
                  "properties": {
                    "status": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "integer"
                        },
                        "message": {
                          "type": "string"
                        }
                      }
                    },
                    "content": {
                      "type": "array",
                      "description": "Tasks here doesn't include \"layout\", \"targets\" & \"history\"",
                      "items": {
                        "$ref": "#/components/schemas/Task"
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "count": {
                          "type": "integer"
                        },
                        "lastId": {
                          "type": "string"
                        },
                        "size": {
                          "type": "number"
                        }
                      }
                    }
                  }
                },
                "examples": {}
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "operationId": "tasks-get",
        "description": "Get tasks of the authed user's institution.\n\nNeeds `namespaces[namespaceId].tasks-get` (see `/me/permissions` for more info).",
        "security": [
          {
            "User Token": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/previous"
          },
          {
            "$ref": "#/components/parameters/count"
          },
          {
            "$ref": "#/components/parameters/namespaces"
          }
        ]
      },
      "post": {
        "summary": "Add new task",
        "operationId": "tasks-post",
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "x-examples": {
                    "example-1": {
                      "status": {
                        "code": 201,
                        "message": "Created"
                      },
                      "content": {
                        "id": "4359c49b-cde2-4330-b9aa-790f8c6cc840",
                        "institution": "institution:abba8400-1216-11eb-af77-ff33b5dd411e",
                        "layout": {
                          "notImplemented": true
                        },
                        "targets": [
                          "user@example.com"
                        ],
                        "recurrence": "WEEKLY",
                        "nextRun": "2022-10-31T10:00:00.000Z",
                        "enabled": true,
                        "history": [
                          {
                            "type": "creation",
                            "message": "La tâche a été créée par ..."
                          }
                        ],
                        "createdAt": "2022-10-25T11:55:47.375Z",
                        "updatedAt": "2022-10-25T11:55:47.375Z"
                      }
                    }
                  },
                  "properties": {
                    "status": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "integer"
                        },
                        "message": {
                          "type": "string"
                        }
                      }
                    },
                    "content": {
                      "$ref": "#/components/schemas/TaskFull"
                    }
                  }
                },
                "examples": {}
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "User Token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TaskBody"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "namespace": {
                        "type": "string"
                      }
                    }
                  }
                ]
              },
              "examples": {}
            }
          },
          "description": ""
        },
        "description": "Add new reporting task to the authed user's institution.\n\nNeeds `namespaces[namespaceId].tasks-post` (see `/me/permissions` for more info).",
        "parameters": [],
        "tags": [
          "tasks"
        ]
      }
    },
    "/tasks/{taskId}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "taskId",
          "in": "path",
          "required": true,
          "description": "The task id"
        }
      ],
      "get": {
        "summary": "Get specific task",
        "tags": [
          "tasks"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "x-examples": {
                    "example-1": {
                      "status": {
                        "code": 200,
                        "message": "OK"
                      },
                      "content": {
                        "id": "3f419e88-5a82-4c35-8520-a40a4f1742ae",
                        "institution": "institution:abba8400-1216-11eb-af77-ff33b5dd411e",
                        "layout": {
                          "notImplemented": true
                        },
                        "targets": [
                          "user@example.com"
                        ],
                        "recurrence": "WEEKLY",
                        "nextRun": "2022-10-31T10:00:00.000Z",
                        "enabled": true,
                        "history": [
                          {
                            "type": "creation",
                            "message": "La tâche a été créée par ..."
                          }
                        ],
                        "createdAt": "2022-10-25T12:46:27.264Z",
                        "updatedAt": "2022-10-25T12:46:27.264Z"
                      }
                    }
                  },
                  "properties": {
                    "status": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "integer"
                        },
                        "message": {
                          "type": "string"
                        }
                      }
                    },
                    "content": {
                      "$ref": "#/components/schemas/TaskFull"
                    }
                  }
                },
                "examples": {}
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "operationId": "tasks-get-taskId",
        "description": "Get specific task of the authed user's institution.\n\nNeeds `namespaces[namespaceId].tasks-get-task` (see `/me/permissions` for more info).",
        "security": [
          {
            "User Token": []
          }
        ],
        "parameters": []
      },
      "put": {
        "summary": "Update specific task",
        "operationId": "tasks-put-taskId",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "x-examples": {
                    "example-1": {
                      "status": {
                        "code": 200,
                        "message": "OK"
                      },
                      "content": {
                        "id": "3f419e88-5a82-4c35-8520-a40a4f1742ae",
                        "institution": "institution:abba8400-1216-11eb-af77-ff33b5dd411e",
                        "layout": {
                          "edited": true,
                          "notImplemented": true
                        },
                        "targets": [
                          "user@example.com",
                          "user2@example.com"
                        ],
                        "recurrence": "WEEKLY",
                        "nextRun": "2022-11-28T10:00:00.000Z",
                        "enabled": true,
                        "history": [
                          {
                            "type": "creation",
                            "message": "La tâche a été créée par ..."
                          },
                          {
                            "type": "edition",
                            "message": "La tâche a été créée par ..."
                          }
                        ],
                        "createdAt": "2022-10-25T12:46:27.264Z",
                        "updatedAt": "2022-10-26T06:54:23.833Z"
                      }
                    }
                  },
                  "properties": {
                    "status": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "integer"
                        },
                        "message": {
                          "type": "string"
                        }
                      }
                    },
                    "content": {
                      "$ref": "#/components/schemas/TaskFull"
                    }
                  }
                },
                "examples": {}
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "description": "Update specific task of the authed user's institution.\n\nNeeds `namespaces[namespaceId].tasks-put-task` (see `/me/permissions` for more info).",
        "security": [
          {
            "User Token": []
          }
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskBody"
              },
              "examples": {}
            }
          }
        },
        "tags": [
          "tasks"
        ]
      },
      "delete": {
        "summary": "Delete specific task",
        "operationId": "tasks-delete-taskId",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "x-examples": {
                    "example-1": {
                      "status": {
                        "code": 200,
                        "message": "OK"
                      },
                      "content": {
                        "id": "f63891f9-f640-4fdb-b426-65ba678b4e3e",
                        "institution": "institution:abba8400-1216-11eb-af77-ff33b5dd411e",
                        "layout": {
                          "toDelete": true
                        },
                        "targets": [
                          "user@example.com"
                        ],
                        "recurrence": "WEEKLY",
                        "nextRun": "2022-10-31T10:00:00.000Z",
                        "enabled": true,
                        "history": [
                          {
                            "createdAt": "2022-10-26T08:12:12Z",
                            "type": "creation",
                            "message": "Tâche créée par ..."
                          }
                        ],
                        "createdAt": "2022-10-26T08:12:12.402Z",
                        "updatedAt": "2022-10-26T08:12:12.402Z"
                      }
                    }
                  },
                  "properties": {
                    "status": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "integer"
                        },
                        "message": {
                          "type": "string"
                        }
                      }
                    },
                    "content": {
                      "$ref": "#/components/schemas/TaskFull"
                    }
                  }
                },
                "examples": {}
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "description": "Update specific task of the authed user's institution.\n\nNeeds `namespaces[namespaceId].tasks-delete-task` (see `/me/permissions` for more info).",
        "security": [
          {
            "User Token": []
          }
        ],
        "parameters": [],
        "tags": [
          "tasks"
        ]
      }
    },
    "/tasks/{taskId}/enable": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "taskId",
          "in": "path",
          "required": true,
          "description": "The task id"
        }
      ],
      "put": {
        "summary": "Enable task",
        "operationId": "tasks-put-taskId-enable",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "x-examples": {
                    "example-1": {
                      "status": {
                        "code": 200,
                        "message": "OK"
                      },
                      "content": {}
                    }
                  },
                  "properties": {
                    "status": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "integer"
                        },
                        "message": {
                          "type": "string"
                        }
                      }
                    },
                    "content": {
                      "$ref": "#/components/schemas/TaskFull"
                    }
                  }
                },
                "examples": {}
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "User Token": []
          }
        ],
        "tags": [
          "tasks"
        ],
        "description": "Enable task periodic generation.\n\nNeeds `namespaces[namespaceId].tasks-put-task-enable` (see `/me/permissions` for more info).",
        "parameters": []
      }
    },
    "/tasks/{taskId}/disable": {
      "put": {
        "summary": "Disable task",
        "operationId": "tasks-put-taskId]-disable",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "x-examples": {
                    "example-1": {
                      "status": {
                        "code": 200,
                        "message": "OK"
                      },
                      "content": {}
                    }
                  },
                  "properties": {
                    "status": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "integer"
                        },
                        "message": {
                          "type": "string"
                        }
                      }
                    },
                    "content": {
                      "$ref": "#/components/schemas/TaskFull"
                    }
                  }
                },
                "examples": {}
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "User Token": []
          }
        ],
        "tags": [
          "tasks"
        ],
        "description": "Disable task periodic generation.\n\nNeeds `namespaces[namespaceId].tasks-put-task-disable` (see `/me/permissions` for more info).",
        "parameters": []
      },
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "taskId",
          "in": "path",
          "required": true,
          "description": "The task id"
        }
      ]
    },
    "/tasks/{taskId}/run": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "taskId",
          "in": "path",
          "required": true,
          "description": "The task id"
        }
      ],
      "post": {
        "summary": "Generate report",
        "operationId": "tasks-post-task-run",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "x-examples": {
                    "example-1": {
                      "status": {
                        "code": 200,
                        "message": "OK"
                      },
                      "content": {}
                    }
                  },
                  "properties": {
                    "status": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "integer"
                        },
                        "message": {
                          "type": "string"
                        }
                      }
                    },
                    "content": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "Bull's job id"
                        },
                        "queue": {
                          "type": "string"
                        },
                        "data": {
                          "type": "object",
                          "properties": {
                            "task": {
                              "$ref": "#/components/schemas/TaskFull"
                            },
                            "origin": {
                              "type": "string"
                            },
                            "writeHistory": {
                              "type": "boolean"
                            },
                            "debug": {
                              "type": "boolean"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "report"
        ],
        "security": [
          {
            "User Token": []
          }
        ],
        "parameters": [
          {
            "schema": {
              "type": "array",
              "minItems": 1
            },
            "in": "query",
            "name": "test_emails",
            "style": "form",
            "description": "Emails to send instead of task targets. Enables test mode if present."
          },
          {
            "schema": {
              "type": "string",
              "format": "date"
            },
            "in": "query",
            "name": "period_start",
            "description": "Override period start. ISO format. Time is ignored."
          },
          {
            "schema": {
              "type": "string",
              "format": "date"
            },
            "in": "query",
            "name": "period_end",
            "description": "Override period end. ISO format. Time is ignored."
          }
        ],
        "description": "Trigger generation of report.\n\nNeeds `namespaces[namespaceId].tasks-post-task-run` (see `/me/permissions` for more info)."
      }
    },
    "/tasks/{taskId}/unsubscribe": {
      "put": {
        "summary": "Unsubscribe from task",
        "operationId": "tasks-post-taskId-unsubscribe",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "x-examples": {
                    "example-1": {
                      "status": {
                        "code": 200,
                        "message": "OK"
                      },
                      "content": {
                        "name": "generateReports",
                        "running": true,
                        "nextRun": "2022-11-16T09:10:00.000Z",
                        "lastRun": "2022-11-16T09:09:59.248Z"
                      }
                    }
                  },
                  "properties": {
                    "status": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "integer"
                        },
                        "message": {
                          "type": "string"
                        }
                      }
                    },
                    "content": {
                      "$ref": "#/components/schemas/TaskFull"
                    }
                  }
                },
                "examples": {}
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "description": "Shorthand to remove given email in given task.\n\nNeeds `general.tasks-put-task-unsubscribe` (see `/me/permissions` for more info) but it should always be granted.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "unsubId": {
                    "type": "string",
                    "description": "The id given in mail"
                  },
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "The mail address"
                  }
                },
                "required": [
                  "unsubId",
                  "email"
                ]
              },
              "examples": {
                "Example": {
                  "value": {
                    "unsubId": "YWY1NDk2MjYtNjQxYi00NGVkLTkzODEtZjNiNzUxMzcwMTY0%3AdG9tLnN1YmxldEBpbmlzdC50ZXN0LmZy",
                    "email": "user@example.com"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "unsubscribe"
        ],
        "parameters": []
      },
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "taskId",
          "in": "path",
          "required": true,
          "description": "The task id"
        }
      ]
    },
    "/reports/{path}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "path",
          "in": "path",
          "required": true,
          "description": "Path to report"
        }
      ],
      "get": {
        "summary": "Get specific report",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "examples": {}
              },
              "application/pdf": {
                "schema": {
                  "type": "string",
                  "description": "The document",
                  "format": "binary"
                }
              }
            }
          }
        },
        "operationId": "reports-get-year-yearMonth-filename",
        "description": "Get specific report.\n\nNeeds `general.reports-get-year-yearMonth-filename` (see `/me/permissions` for more info).",
        "parameters": [],
        "security": [
          {
            "User Token": []
          }
        ],
        "tags": [
          "report"
        ]
      }
    },
    "/queues": {
      "get": {
        "summary": "Get all queues",
        "tags": [
          "queue"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "integer"
                        },
                        "message": {
                          "type": "string"
                        }
                      }
                    },
                    "content": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "status": {
                        "code": 200,
                        "message": "OK"
                      },
                      "content": [
                        "generation"
                      ]
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "value": {
                      "status": {
                        "code": 200,
                        "message": "OK"
                      },
                      "content": [
                        "generation"
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "operationId": "queues-get",
        "description": "List all possible queues names.\n\nNeeds `general.queues-get` (see `/me/permissions` for more info).",
        "security": [
          {
            "User Token": []
          }
        ]
      }
    },
    "/queues/{queue}/pause": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "queue",
          "in": "path",
          "required": true,
          "description": "Queue name"
        }
      ],
      "put": {
        "summary": "Pause queue",
        "operationId": "queues-put-queue-pause",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "x-examples": {
                    "example-1": {
                      "status": {
                        "code": 200,
                        "message": "OK"
                      },
                      "content": {
                        "status": "active",
                        "jobs": []
                      }
                    }
                  },
                  "properties": {
                    "status": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "integer"
                        },
                        "message": {
                          "type": "string"
                        }
                      }
                    },
                    "content": {
                      "$ref": "#/components/schemas/Queue"
                    }
                  }
                },
                "examples": {}
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "User Token": []
          }
        ],
        "description": "Pause the whole queue.\n\nNeeds `general.queues-put-queue-pause` (see `/me/permissions` for more info).",
        "tags": [
          "queue"
        ]
      }
    },
    "/queues/{queue}/resume": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "queue",
          "in": "path",
          "required": true,
          "description": "Queue name"
        }
      ],
      "put": {
        "summary": "Resume queue",
        "operationId": "queues-put-queue-resume",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "x-examples": {
                    "example-1": {
                      "status": {
                        "code": 200,
                        "message": "OK"
                      },
                      "content": {
                        "status": "active",
                        "jobs": []
                      }
                    }
                  },
                  "properties": {
                    "status": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "integer"
                        },
                        "message": {
                          "type": "string"
                        }
                      }
                    },
                    "content": {
                      "$ref": "#/components/schemas/Queue"
                    }
                  }
                },
                "examples": {}
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "description": "Resume the whole queue.\n\nNeeds `general.queues-put-queue-resume` (see `/me/permissions` for more info).",
        "security": [
          {
            "User Token": []
          }
        ],
        "tags": [
          "queue"
        ]
      }
    },
    "/queues/{queue}/jobs": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "queue",
          "in": "path",
          "required": true,
          "description": "Queue name"
        }
      ],
      "get": {
        "summary": "Get jobs of queue",
        "tags": [
          "queue"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "x-examples": {
                    "example-1": {
                      "status": {
                        "code": 200,
                        "message": "OK"
                      },
                      "content": {
                        "id": "135",
                        "data": {},
                        "progress": 1,
                        "added": "2022-11-15T11:01:33.179Z",
                        "started": "2022-11-15T11:01:33.184Z",
                        "ended": "2022-11-15T11:01:38.320Z",
                        "attempts": 1,
                        "status": "completed"
                      }
                    }
                  },
                  "properties": {
                    "status": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "integer"
                        },
                        "message": {
                          "type": "string"
                        }
                      }
                    },
                    "content": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Job"
                      }
                    }
                  }
                },
                "examples": {}
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/401"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "operationId": "queues-get-queue-jobId",
        "description": "Get jobs of the queue.\n\nNeeds `general.queues-get-queue-jobs` (see `/me/permissions` for more info).",
        "security": [
          {
            "User Token": []
          }
        ]
      }
    },
    "/queues/{queue}/jobs/{jobId}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "queue",
          "in": "path",
          "required": true,
          "description": "Queue name"
        },
        {
          "schema": {
            "type": "string"
          },
          "name": "jobId",
          "in": "path",
          "required": true,
          "description": "Job id"
        }
      ],
      "get": {
        "summary": "Get specific job",
        "tags": [
          "queue"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "x-examples": {
                    "example-1": {
                      "status": {
                        "code": 200,
                        "message": "OK"
                      },
                      "content": {
                        "id": "135",
                        "data": {},
                        "progress": 1,
                        "added": "2022-11-15T11:01:33.179Z",
                        "started": "2022-11-15T11:01:33.184Z",
                        "ended": "2022-11-15T11:01:38.320Z",
                        "attempts": 1,
                        "status": "completed"
                      }
                    }
                  },
                  "properties": {
                    "status": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "integer"
                        },
                        "message": {
                          "type": "string"
                        }
                      }
                    },
                    "content": {
                      "$ref": "#/components/schemas/Job"
                    }
                  }
                },
                "examples": {}
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/401"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "operationId": "queues-get-queue-jobs-jobId",
        "description": "Get specific job of the authed user's institution.\n\nNeeds `namespaces[namespaceId].queues-get` (see `/me/permissions` for more info).",
        "security": [
          {
            "User Token": []
          }
        ]
      }
    },
    "/queues/{queue}/{jobId}/retry": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "queue",
          "in": "path",
          "required": true,
          "description": "Queue name"
        },
        {
          "schema": {
            "type": "string"
          },
          "name": "jobId",
          "in": "path",
          "required": true,
          "description": "Job id"
        }
      ],
      "post": {
        "summary": "Retry specific job",
        "operationId": "queues-post-queue-jobId-retry",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "x-examples": {
                    "example-1": {
                      "status": {
                        "code": 200,
                        "message": "OK"
                      },
                      "content": {
                        "id": "135",
                        "data": {
                          "...": "..."
                        },
                        "progress": 1,
                        "added": "2022-11-15T11:01:33.179Z",
                        "started": "2022-11-15T11:01:33.184Z",
                        "ended": "2022-11-15T11:01:38.320Z",
                        "attempts": 1,
                        "status": "completed"
                      }
                    }
                  },
                  "properties": {
                    "status": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "integer"
                        },
                        "message": {
                          "type": "string"
                        }
                      }
                    },
                    "content": {
                      "$ref": "#/components/schemas/Job"
                    }
                  }
                },
                "examples": {}
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "description": "Retry specific job of the authed user's institution.\n\nNeeds `namespaces[namespaceId].queues-post-queue-jobs-jobId-retry` (see `/me/permissions` for more info).",
        "tags": [
          "queue"
        ],
        "security": [
          {
            "User Token": []
          }
        ]
      }
    },
    "/crons": {
      "get": {
        "summary": "Get all crons",
        "tags": [
          "cron"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "x-examples": {
                    "example-1": {
                      "status": {
                        "code": 200,
                        "message": "OK"
                      },
                      "content": [
                        {
                          "name": "daily-report",
                          "running": true,
                          "lastRun": "2022-11-16T07:21:00.405Z",
                          "nextRun": "2022-11-16T08:22:00.000+01:00"
                        }
                      ]
                    }
                  },
                  "properties": {
                    "status": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "integer"
                        },
                        "message": {
                          "type": "string"
                        }
                      }
                    },
                    "content": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Cron"
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "value": {
                      "status": {
                        "code": 200,
                        "message": "OK"
                      },
                      "content": [
                        {
                          "name": "generateReports",
                          "running": true,
                          "nextRun": "2022-11-16T08:22:00.000+01:00"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "operationId": "crons-get",
        "security": [
          {
            "User Token": []
          }
        ],
        "description": "Get all crons.\n\nNeeds `general.crons-get` (see `/me/permissions` for more info)."
      }
    },
    "/crons/{cron}": {
      "get": {
        "summary": "Get specific cron",
        "tags": [
          "cron"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "x-examples": {
                    "example-1": {
                      "status": {
                        "code": 200,
                        "message": "OK"
                      },
                      "content": {
                        "name": "daily-report",
                        "running": true,
                        "nextRun": "2022-11-16T09:10:00.000+01:00"
                      }
                    }
                  },
                  "properties": {
                    "status": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "integer"
                        },
                        "message": {
                          "type": "string"
                        }
                      }
                    },
                    "content": {
                      "$ref": "#/components/schemas/Cron"
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "value": {
                      "status": {
                        "code": 200,
                        "message": "OK"
                      },
                      "content": {
                        "name": "generateReports",
                        "running": true,
                        "nextRun": "2022-11-16T09:10:00.000Z",
                        "lastRun": "2022-11-16T09:09:59.248Z"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "operationId": "crons-get-cron",
        "description": "Get specific crons.\n\nNeeds `general.crons-get-cron` (see `/me/permissions` for more info).",
        "security": [
          {
            "User Token": []
          }
        ]
      },
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "cron",
          "in": "path",
          "required": true,
          "description": "Cron name"
        }
      ]
    },
    "/crons/{cron}/start": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "cron",
          "in": "path",
          "required": true,
          "description": "Cron name"
        }
      ],
      "put": {
        "summary": "Start cron",
        "operationId": "crons-put-cron-start",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "x-examples": {
                    "example-1": {
                      "status": {
                        "code": 200,
                        "message": "OK"
                      },
                      "content": {
                        "name": "daily-report",
                        "running": true,
                        "nextRun": "2022-11-16T09:10:00.000+01:00"
                      }
                    }
                  },
                  "properties": {
                    "status": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "integer"
                        },
                        "message": {
                          "type": "string"
                        }
                      }
                    },
                    "content": {
                      "$ref": "#/components/schemas/Cron"
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "value": {
                      "status": {
                        "code": 200,
                        "message": "OK"
                      },
                      "content": {
                        "name": "generateReports",
                        "running": true,
                        "nextRun": "2022-11-16T09:10:00.000Z",
                        "lastRun": "2022-11-16T09:09:59.248Z"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "description": "Start specific cron.\n\nNeeds `general.crons-put-cron-start` (see `/me/permissions` for more info).",
        "tags": [
          "cron"
        ],
        "security": [
          {
            "User Token": []
          }
        ]
      }
    },
    "/crons/{cron}/stop": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "cron",
          "in": "path",
          "required": true,
          "description": "Cron name"
        }
      ],
      "put": {
        "summary": "Stop cron",
        "operationId": "crons-put-cron-stop",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "x-examples": {
                    "example-1": {
                      "status": {
                        "code": 200,
                        "message": "OK"
                      },
                      "content": {
                        "name": "daily-report",
                        "running": true,
                        "nextRun": "2022-11-16T09:10:00.000+01:00"
                      }
                    }
                  },
                  "properties": {
                    "status": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "integer"
                        },
                        "message": {
                          "type": "string"
                        }
                      }
                    },
                    "content": {
                      "$ref": "#/components/schemas/Cron"
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "value": {
                      "status": {
                        "code": 200,
                        "message": "OK"
                      },
                      "content": {
                        "name": "generateReports",
                        "running": true,
                        "nextRun": "2022-11-16T09:10:00.000Z",
                        "lastRun": "2022-11-16T09:09:59.248Z"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "description": "Stop specific cron.\n\nNeeds `general.crons-put-cron-stop` (see `/me/permissions` for more info).",
        "tags": [
          "cron"
        ],
        "security": [
          {
            "User Token": []
          }
        ]
      }
    },
    "/crons/{cron}/force": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "cron",
          "in": "path",
          "required": true,
          "description": "Cron name"
        }
      ],
      "post": {
        "summary": "Force cron",
        "operationId": "crons-post-cron-force",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "x-examples": {
                    "example-1": {
                      "status": {
                        "code": 200,
                        "message": "OK"
                      },
                      "content": {
                        "name": "daily-report",
                        "running": true,
                        "nextRun": "2022-11-16T09:10:00.000+01:00"
                      }
                    }
                  },
                  "properties": {
                    "status": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "integer"
                        },
                        "message": {
                          "type": "string"
                        }
                      }
                    },
                    "content": {
                      "$ref": "#/components/schemas/Cron"
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "value": {
                      "status": {
                        "code": 200,
                        "message": "OK"
                      },
                      "content": {
                        "name": "generateReports",
                        "running": true,
                        "nextRun": "2022-11-16T09:10:00.000Z",
                        "lastRun": "2022-11-16T09:09:59.248Z"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "description": "Force specific cron to run.\n\nNeeds `general.crons-post-cron-force` (see `/me/permissions` for more info).",
        "tags": [
          "cron"
        ],
        "security": [
          {
            "User Token": []
          }
        ]
      }
    },
    "/unsubscribe/{unsubId}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "unsubId",
          "in": "path",
          "required": true,
          "description": "The unsubscribtion id given in mail"
        }
      ],
      "get": {
        "summary": "Get unsubscribe form",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "operationId": "unsubscribe-get-unsubId",
        "description": "Get unsubscribe form to be removed from task targets.",
        "tags": [
          "unsubscribe"
        ]
      }
    },
    "/templates": {
      "get": {
        "summary": "Get templates",
        "tags": [
          "templates"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "x-examples": {
                    "Example 1": {
                      "status": {
                        "code": 200,
                        "message": "OK"
                      },
                      "content": [
                        {
                          "name": "basic",
                          "renderer": "vega-pdf",
                          "pageCount": 6
                        },
                        {
                          "name": "tests/slot-tests",
                          "renderer": "vega-pdf",
                          "pageCount": 9
                        }
                      ]
                    }
                  },
                  "properties": {
                    "status": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "integer"
                        },
                        "message": {
                          "type": "string"
                        }
                      }
                    },
                    "content": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Template"
                      }
                    }
                  }
                },
                "examples": {}
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "operationId": "templates-get",
        "security": [
          {
            "User Token": []
          }
        ],
        "description": "Get all templates usable by tasks.\n\nNeeds `general.templates-get` (see `/me/permissions` for more info)."
      },
      "parameters": [],
      "post": {
        "summary": "Create template",
        "operationId": "post-templates",
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "x-examples": {
                    "Example 1": {
                      "apiVersion": 1,
                      "status": {
                        "code": 200,
                        "message": "OK"
                      },
                      "content": {
                        "name": "scratch",
                        "tags": [],
                        "body": {
                          "layouts": []
                        },
                        "createdAt": "2023-04-11T09:31:24.620Z",
                        "updatedAt": "2023-04-11T09:31:24.620Z",
                        "renderer": "vega-pdf",
                        "pageCount": 0
                      }
                    }
                  },
                  "properties": {
                    "apiVersion": {
                      "type": "integer"
                    },
                    "status": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "integer"
                        },
                        "message": {
                          "type": "string"
                        }
                      }
                    },
                    "content": {
                      "$ref": "#/components/schemas/TemplateFull"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "description": "Add a template usable by tasks.\n\nNeeds `general.queues-post` (see `/me/permissions` for more info).",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TemplateBody"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string"
                      }
                    }
                  }
                ]
              }
            }
          },
          "description": ""
        },
        "security": [
          {
            "User Token": []
          }
        ],
        "tags": [
          "templates"
        ]
      }
    },
    "/templates/{layoutName}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "layoutName",
          "in": "path",
          "required": true,
          "description": "Name of the layout"
        }
      ],
      "get": {
        "summary": "Get specific template",
        "tags": [
          "templates"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "x-examples": {
                    "Example 1": {
                      "status": {
                        "code": 200,
                        "message": "OK"
                      },
                      "content": {
                        "name": "tests/slot-tests",
                        "renderer": "vega-pdf",
                        "pageCount": 9,
                        "template": {}
                      }
                    }
                  },
                  "properties": {
                    "status": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "integer"
                        },
                        "message": {
                          "type": "string"
                        }
                      }
                    },
                    "content": {
                      "$ref": "#/components/schemas/TemplateFull"
                    }
                  }
                },
                "examples": {}
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "operationId": "templates-get-name(*)",
        "security": [
          {
            "User Token": []
          }
        ],
        "parameters": [],
        "description": "Get specific template.\n\nNeeds `general.templates-get-name(*)` (see `/me/permissions` for more info).",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TemplateBody"
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update specific template",
        "operationId": "put-templates-layoutName",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "x-examples": {
                    "Example 1": {
                      "status": {
                        "code": 200,
                        "message": "OK"
                      },
                      "content": {
                        "name": "scratch",
                        "tags": [],
                        "body": {
                          "layouts": []
                        },
                        "createdAt": "2023-04-11T09:31:24.620Z",
                        "updatedAt": "2023-04-11T09:31:24.620Z",
                        "renderer": "vega-pdf",
                        "pageCount": 0
                      }
                    }
                  },
                  "properties": {
                    "status": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "integer"
                        },
                        "message": {
                          "type": "string"
                        }
                      }
                    },
                    "content": {
                      "$ref": "#/components/schemas/TemplateFull"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "description": "Update a template.\n\nNeeds `general.templates-put-name(*)` (see `/me/permissions` for more info).",
        "security": [
          {
            "User Token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TemplateBody"
              }
            }
          }
        },
        "tags": [
          "templates"
        ]
      },
      "delete": {
        "summary": "Delete specific template",
        "operationId": "delete-templates-layoutName",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "x-examples": {
                    "Example 1": {
                      "status": {
                        "code": 200,
                        "message": "OK"
                      },
                      "content": {
                        "name": "scratch",
                        "tags": [],
                        "body": {
                          "layouts": []
                        },
                        "createdAt": "2023-04-11T09:31:24.620Z",
                        "updatedAt": "2023-04-11T09:31:24.620Z",
                        "renderer": "vega-pdf",
                        "pageCount": 0
                      }
                    }
                  },
                  "properties": {
                    "status": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "integer"
                        },
                        "message": {
                          "type": "string"
                        }
                      }
                    },
                    "content": {
                      "$ref": "#/components/schemas/TemplateFull"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "description": "Delete template.\n\nNeeds `general.templates-delete-name(*)` (see `/me/permissions` for more info).",
        "security": [
          {
            "User Token": []
          }
        ],
        "tags": [
          "templates"
        ]
      }
    },
    "/history": {
      "get": {
        "summary": "Get history entries",
        "tags": [
          "history"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "x-examples": {
                    "Example 1": {
                      "status": {
                        "code": 200,
                        "message": "OK"
                      },
                      "content": [
                        {
                          "id": "8ad0bc3d-2dd4-4d54-892b-868bc20cc14a",
                          "taskId": "af549626-641b-44ed-9381-f3b751370164",
                          "type": "edition",
                          "message": "Tâche activée par tom.sublet",
                          "data": null,
                          "createdAt": "2022-12-01T14:08:40.000Z"
                        },
                        {
                          "id": "687ef0ae-e912-421e-a9d9-4c68968045cc",
                          "taskId": "af549626-641b-44ed-9381-f3b751370164",
                          "type": "edition",
                          "message": "Tâche désactivée par tom.sublet",
                          "data": null,
                          "createdAt": "2022-12-01T14:08:34.000Z"
                        },
                        {
                          "id": "c3a054a3-24c3-4120-bfa8-939f328a8657",
                          "taskId": "7398ffd9-ab64-48d0-a854-5f0b28b3dca9",
                          "type": "generation-error",
                          "message": "Rapport \"2022/2022-11/ezreeport_ezMESURE_bibcnrs-*:-report-1-v-2-1_c0192740-ac6d-48cf-b15d-91fbadcf3cbc\" non généré par tom.sublet suite à une erreur.",
                          "data": {
                            "jobId": "77",
                            "jobAdded": "2022-11-24T11:40:34.441Z"
                          },
                          "createdAt": "2022-11-24T11:40:37.000Z"
                        },
                        {
                          "id": "2fdd9f4c-1ac5-49a1-b988-c33a590c4c94",
                          "taskId": "af549626-641b-44ed-9381-f3b751370164",
                          "type": "unsubscription",
                          "message": "tom.sublet@inist.test.fr s'est désinscrit de la liste de diffusion.",
                          "data": null,
                          "createdAt": "2022-11-24T08:25:44.000Z"
                        },
                        {
                          "id": "75ae6679-df98-45ad-b8da-2d7e62169681",
                          "taskId": "7398ffd9-ab64-48d0-a854-5f0b28b3dca9",
                          "type": "generation-error",
                          "message": "Rapport \"2022/2022-11/ezreeport_ezMESURE_bibcnrs-*:-report-1-v-2-1_aa6017f8-1b2e-4d11-98ad-43193342b0b7\" non généré par tom.sublet suite à une erreur.",
                          "data": {
                            "jobId": "28",
                            "jobAdded": "2022-11-18T14:45:36.660Z"
                          },
                          "createdAt": "2022-11-18T14:45:39.431Z"
                        },
                        {
                          "id": "afc9879b-efe4-4171-93d6-d2ce19683f94",
                          "taskId": "7398ffd9-ab64-48d0-a854-5f0b28b3dca9",
                          "type": "generation-success",
                          "message": "Rapport \"2022/2022-11/ezreeport_ezMESURE_bibcnrs-*:-report-1-v-2-1_63ddaa82-41b0-4693-a4e9-1f7e9f460b6a\" généré par daily-cron-job",
                          "data": {
                            "jobId": "9",
                            "jobAdded": "2022-11-16T08:35:00.102Z"
                          },
                          "createdAt": "2022-11-16T08:35:05.610Z"
                        },
                        {
                          "id": "a877468c-4130-4f30-a429-0852999b259f",
                          "taskId": "af549626-641b-44ed-9381-f3b751370164",
                          "type": "generation-success",
                          "message": "Rapport \"2022/2022-11/ezreeport_ezMESURE_test-api_8f4d4c51-bfbc-46c7-ae2c-505bab24d052\" généré par daily-cron-job",
                          "data": {
                            "jobId": "7",
                            "jobAdded": "2022-11-16T08:35:00.100Z"
                          },
                          "createdAt": "2022-11-16T08:35:05.230Z"
                        },
                        {
                          "id": "e080340c-b217-4113-9615-f0d89d84926d",
                          "taskId": "696bc968-6155-4258-85be-ef2fa53040a3",
                          "type": "generation-success",
                          "message": "Rapport \"2022/2022-11/ezreeport_ezMESURE_tests-de-slots_7ad82b0f-8ad8-4e35-97d3-52f771f0e110\" généré par daily-cron-job",
                          "data": {
                            "jobId": "8",
                            "jobAdded": "2022-11-16T08:35:00.101Z"
                          },
                          "createdAt": "2022-11-16T08:35:03.340Z"
                        },
                        {
                          "id": "b86683b5-e70c-43fe-8f6b-b6a57406e228",
                          "taskId": "7398ffd9-ab64-48d0-a854-5f0b28b3dca9",
                          "type": "generation-success",
                          "message": "Rapport \"2022/2022-11/ezreeport_ezMESURE_bibcnrs-*:-report-1-v-2-1_e524a804-9d10-46d1-8ae9-6002d278b82e\" généré par auto",
                          "data": {
                            "jobId": "5",
                            "jobAdded": "2022-11-16T06:33:00.089Z"
                          },
                          "createdAt": "2022-11-16T06:33:05.551Z"
                        },
                        {
                          "id": "b1800558-1183-40f9-b6a6-683531f28700",
                          "taskId": "696bc968-6155-4258-85be-ef2fa53040a3",
                          "type": "generation-success",
                          "message": "Rapport \"2022/2022-11/ezreeport_ezMESURE_tests-de-slots_808e7a78-3386-4b6a-bb01-e994da196cab\" généré par auto",
                          "data": {
                            "jobId": "4",
                            "jobAdded": "2022-11-16T06:33:00.089Z"
                          },
                          "createdAt": "2022-11-16T06:33:03.267Z"
                        },
                        {
                          "id": "5ae55e48-d4ae-4d1f-a8ed-9d4219f12276",
                          "taskId": "7398ffd9-ab64-48d0-a854-5f0b28b3dca9",
                          "type": "generation-success",
                          "message": "Rapport \"2022/2022-11/ezreeport_ezMESURE_bibcnrs-*:-report-1-v-2-1_87bb7e0c-d0dc-4204-93a1-73142ad3b9ae\" généré par tom.sublet",
                          "data": {
                            "jobId": "143",
                            "jobAdded": "2022-11-15T13:54:05.851Z",
                            "jobAttempts": 1
                          },
                          "createdAt": "2022-11-15T13:54:11.155Z"
                        },
                        {
                          "id": "4282365e-779f-4d93-9b26-771f73f35472",
                          "taskId": "7398ffd9-ab64-48d0-a854-5f0b28b3dca9",
                          "type": "edition",
                          "message": "Tâche éditée par tom.sublet",
                          "data": null,
                          "createdAt": "2022-11-14T14:33:07.000Z"
                        },
                        {
                          "id": "e7eaf700-1a0b-4de5-976c-8bf366fa49f1",
                          "taskId": "7398ffd9-ab64-48d0-a854-5f0b28b3dca9",
                          "type": "edition",
                          "message": "Tâche éditée par tom.sublet",
                          "data": null,
                          "createdAt": "2022-11-14T14:32:43.000Z"
                        },
                        {
                          "id": "3d318ebb-110e-48f8-ab9a-c9f63d4f1c60",
                          "taskId": "7398ffd9-ab64-48d0-a854-5f0b28b3dca9",
                          "type": "edition",
                          "message": "Tâche éditée par tom.sublet",
                          "data": null,
                          "createdAt": "2022-11-14T09:52:30.000Z"
                        },
                        {
                          "id": "bebec9b2-8c2b-44d0-b740-4c0a766c59bc",
                          "taskId": "af549626-641b-44ed-9381-f3b751370164",
                          "type": "generation-error",
                          "message": "Rapport \"2022/2022-11/ezreeport_ezMESURE_test-api_fd3526e3-7fc9-48a9-8d30-b6f2f8cfd54d\" non généré par tom.sublet suite à une erreur.",
                          "data": null,
                          "createdAt": "2022-11-07T15:16:37.000Z"
                        }
                      ],
                      "meta": {
                        "count": 15,
                        "lastId": "bebec9b2-8c2b-44d0-b740-4c0a766c59bc"
                      }
                    }
                  },
                  "properties": {
                    "status": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "integer"
                        },
                        "message": {
                          "type": "string"
                        }
                      }
                    },
                    "content": {
                      "$ref": "#/components/schemas/History"
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "count": {
                          "type": "integer"
                        },
                        "lastId": {
                          "type": "string"
                        },
                        "size": {
                          "type": "number",
                          "description": "Mirror of count parameter"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "value": {
                      "status": {
                        "code": 200,
                        "message": "OK"
                      },
                      "content": {
                        "id": "string",
                        "taskId": "string",
                        "type": "string",
                        "message": "string",
                        "createdAt": "2019-08-24T14:15:22Z",
                        "data": {}
                      },
                      "meta": {
                        "count": 1,
                        "lastId": "string",
                        "size": 15
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "operationId": "history-get",
        "security": [
          {
            "User Token": []
          }
        ],
        "description": "Get history entries of all tasks of given institution.\n\nNeeds `namespaces[namespaceId].history-get` (see `/me/permissions` for more info).",
        "parameters": [
          {
            "$ref": "#/components/parameters/previous"
          },
          {
            "$ref": "#/components/parameters/count"
          },
          {
            "$ref": "#/components/parameters/namespaces"
          }
        ]
      }
    },
    "/me": {
      "get": {
        "summary": "Get user info",
        "tags": [
          "auth"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "x-examples": {
                    "Example 1": {
                      "status": {
                        "code": 200,
                        "message": "OK"
                      },
                      "content": {
                        "username": "tom.sublet",
                        "email": "tom.sublet@inist.fr",
                        "roles": [
                          "ezreporting",
                          "ezreporting-readonly",
                          "bibcnrs",
                          "tech_contact"
                        ]
                      }
                    }
                  },
                  "properties": {
                    "status": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "integer"
                        },
                        "message": {
                          "type": "string"
                        }
                      }
                    },
                    "content": {
                      "type": "object",
                      "properties": {
                        "username": {
                          "type": "string"
                        },
                        "token": {
                          "type": "string"
                        },
                        "isAdmin": {
                          "type": "boolean"
                        },
                        "createdAt": {
                          "type": "string",
                          "format": "date-time"
                        },
                        "updatedAt": {
                          "type": "string",
                          "format": "date-time"
                        },
                        "memberships": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Membership"
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {}
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "operationId": "auth-get",
        "security": [
          {
            "User Token": []
          }
        ],
        "description": "Get authed user info.\n\nNeeds `auth-get` (see `/me/permissions` for more info) but it should be always granted."
      }
    },
    "/me/permissions": {
      "get": {
        "summary": "Check permissions",
        "tags": [
          "auth"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "x-examples": {
                    "Example 1": {
                      "status": {
                        "code": 200,
                        "message": "OK"
                      },
                      "content": {
                        "health": true,
                        "crons": {
                          "read": false,
                          "update": false
                        },
                        "tasks": {
                          "customInstitution": false,
                          "create": true,
                          "read": true,
                          "update": true,
                          "delete": true
                        },
                        "reports": {
                          "create": true,
                          "read": true
                        },
                        "queues": {
                          "read_all": true,
                          "read_one": false,
                          "update": false,
                          "jobs": {
                            "read": true,
                            "update": true
                          }
                        },
                        "layouts": {
                          "read": true
                        },
                        "history": {
                          "read": false
                        }
                      }
                    }
                  },
                  "properties": {
                    "status": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "integer"
                        },
                        "message": {
                          "type": "string"
                        }
                      }
                    },
                    "content": {
                      "type": "object",
                      "properties": {
                        "general": {
                          "type": "object"
                        },
                        "namespaces": {
                          "type": "object"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "status": {
                        "code": 0,
                        "message": "string"
                      },
                      "content": {
                        "general": {
                          "auth-get": true,
                          "crons-get": true,
                          "crons-get-cron": true,
                          "crons-put-cron-start": true,
                          "crons-put-cron-stop": true,
                          "crons-post-cron-force": true,
                          "health-get": true,
                          "health-get-all": true,
                          "health-get-service": true,
                          "queues-get": true,
                          "queues-put-queue-pause": true,
                          "queues-put-queue-resume": true,
                          "queues-get-queue-jobs": true,
                          "tasks-put-task-unsubscribe": true,
                          "templates-get": true,
                          "templates-post": true,
                          "templates-get-name(*)": true,
                          "templates-put-name(*)": true,
                          "templates-delete-name(*)": true
                        },
                        "namespaces": {
                          "aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee": {
                            "auth-get-namespaces": true,
                            "auth-get-permissions": true,
                            "reports-get-year-yearMonth-filename": true,
                            "history-get": true,
                            "queues-get-queue-jobs-jobId": true,
                            "queues-post-queue-jobs-jobId-retry": true,
                            "tasks-get": true,
                            "tasks-post": true,
                            "tasks-get-task": true,
                            "tasks-put-task": true,
                            "tasks-delete-task": true,
                            "tasks-put-task-enable": true,
                            "tasks-put-task-disable": true,
                            "tasks-post-task-run": true
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "operationId": "auth-get-permissions",
        "security": [
          {
            "User Token": []
          }
        ],
        "description": "Check permissions of current user. There are 2 types of permissions :\n\n- `general` permissions that doesn't depend on the requested namespace\n- `namespace`d permissions, that depend on the requested namespace\n\nNeeds the `namespaces[namespaceId].auth-get-permissions`, but it should be always granted."
      }
    },
    "/me/namespaces": {
      "get": {
        "summary": "Get accessible namespaces",
        "tags": [
          "auth"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "x-examples": {
                    "Example 1": {
                      "status": {
                        "code": 200,
                        "message": "OK"
                      },
                      "content": [
                        {
                          "id": "681d7a77-9551-4466-a48f-4a5e7f57d7d4",
                          "name": "Test3 Dev",
                          "logoId": null,
                          "createdAt": "2023-04-11T13:49:06.535Z",
                          "updatedAt": "2023-04-11T13:49:06.535Z"
                        },
                        {
                          "id": "a2c42f69-c2a0-436e-9099-ecd0fc4f73e6",
                          "name": "Test2 Dev",
                          "logoId": null,
                          "createdAt": "2023-04-11T13:48:39.383Z",
                          "updatedAt": "2023-04-11T13:48:39.383Z"
                        }
                      ]
                    }
                  },
                  "properties": {
                    "status": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "integer"
                        },
                        "message": {
                          "type": "string"
                        }
                      }
                    },
                    "content": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Namespace"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "operationId": "get-me-namespaces",
        "description": "List all accessible namespaces by user.\n\nNeeds the `namespaces[namespaceId].auth-get-namespaces` (see `/me/permissions` for more info), but it should be always granted."
      }
    },
    "/admin/users": {
      "get": {
        "summary": "Get all users",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "x-examples": {
                    "Example 1": {
                      "status": {
                        "code": 200,
                        "message": "OK"
                      },
                      "content": {}
                    }
                  },
                  "properties": {
                    "status": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "integer"
                        },
                        "message": {
                          "type": "string"
                        }
                      }
                    },
                    "content": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/User"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "get-admin-users",
        "security": [
          {
            "API Key": []
          }
        ],
        "description": "Get all available users.\n\nOnly usable with the API Key provided at server initialization.",
        "tags": [
          "admin - users"
        ]
      },
      "post": {
        "summary": "Add new user",
        "operationId": "post-admin-users",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "x-examples": {
                    "Example 1": {
                      "status": {
                        "code": 200,
                        "message": "OK"
                      },
                      "content": {}
                    }
                  },
                  "properties": {
                    "status": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "integer"
                        },
                        "message": {
                          "type": "string"
                        }
                      }
                    },
                    "content": {
                      "$ref": "#/components/schemas/UserFull"
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Create new user.\n\nOnly usable with the API Key provided at server initialization.",
        "security": [
          {
            "API Key": []
          }
        ],
        "tags": [
          "admin - users"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UserBody"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string"
                      }
                    }
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/admin/users/{username}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "username",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Get specific user",
        "tags": [
          "admin - users"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "x-examples": {
                    "Example 1": {
                      "status": {
                        "code": 200,
                        "message": "OK"
                      },
                      "content": {}
                    }
                  },
                  "properties": {
                    "status": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "integer"
                        },
                        "message": {
                          "type": "string"
                        }
                      }
                    },
                    "content": {
                      "$ref": "#/components/schemas/UserFull"
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "get-admin-users-username",
        "security": [
          {
            "API Key": []
          }
        ],
        "description": "Get specific user.\n\nOnly usable with the API Key provided at server initialization."
      },
      "put": {
        "summary": "Update specific user",
        "operationId": "put-admin-users-username",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "x-examples": {
                    "Example 1": {
                      "status": {
                        "code": 200,
                        "message": "OK"
                      },
                      "content": {}
                    }
                  },
                  "properties": {
                    "status": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "integer"
                        },
                        "message": {
                          "type": "string"
                        }
                      }
                    },
                    "content": {
                      "$ref": "#/components/schemas/UserFull"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "API Key": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserBody"
              }
            }
          }
        },
        "tags": [
          "admin - users"
        ],
        "description": "Update specific user.\n\nOnly usable with the API Key provided at server initialization."
      },
      "delete": {
        "summary": "Delete specific user",
        "operationId": "delete-admin-users-username",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "x-examples": {
                    "Example 1": {
                      "status": {
                        "code": 200,
                        "message": "OK"
                      },
                      "content": {}
                    }
                  },
                  "properties": {
                    "status": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "integer"
                        },
                        "message": {
                          "type": "string"
                        }
                      }
                    },
                    "content": {
                      "$ref": "#/components/schemas/UserFull"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "API Key": []
          }
        ],
        "tags": [
          "admin - users"
        ],
        "description": "Delete specific user.\n\nOnly usable with the API Key provided at server initialization."
      }
    },
    "/admin/users/{username}/memberships": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "username",
          "in": "path",
          "required": true
        }
      ],
      "post": {
        "summary": "Add membership of a user",
        "operationId": "post-admin-users-username-memberships",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "x-examples": {
                    "Example 1": {
                      "status": {
                        "code": 200,
                        "message": "OK"
                      },
                      "content": {}
                    }
                  },
                  "properties": {
                    "status": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "integer"
                        },
                        "message": {
                          "type": "string"
                        }
                      }
                    },
                    "content": {
                      "$ref": "#/components/schemas/UserFull"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "API Key": []
          }
        ],
        "tags": [
          "admin - users"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/MembershipBody"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "namespace": {
                        "type": "string"
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "description": "Create new membership for user.\n\nOnly usable with the API Key provided at server initialization."
      }
    },
    "/admin/users/{username}/memberships/{namespace}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "username",
          "in": "path",
          "required": true
        },
        {
          "schema": {
            "type": "string"
          },
          "name": "namespace",
          "in": "path",
          "required": true
        }
      ],
      "put": {
        "summary": "Update membership of a user",
        "operationId": "put-admin-users-username-memberships-namespace",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "x-examples": {
                    "Example 1": {
                      "status": {
                        "code": 200,
                        "message": "OK"
                      },
                      "content": {}
                    }
                  },
                  "properties": {
                    "status": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "integer"
                        },
                        "message": {
                          "type": "string"
                        }
                      }
                    },
                    "content": {
                      "$ref": "#/components/schemas/UserFull"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "API Key": []
          }
        ],
        "tags": [
          "admin - users"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MembershipBody"
              }
            }
          }
        },
        "description": "Update membership of a user.\n\nOnly usable with the API Key provided at server initialization."
      },
      "delete": {
        "summary": "Remove membership of a user",
        "operationId": "delete-admin-users-username-memberships-namespace",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "x-examples": {
                    "Example 1": {
                      "status": {
                        "code": 200,
                        "message": "OK"
                      },
                      "content": {}
                    }
                  },
                  "properties": {
                    "status": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "integer"
                        },
                        "message": {
                          "type": "string"
                        }
                      }
                    },
                    "content": {
                      "$ref": "#/components/schemas/UserFull"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "API Key": []
          }
        ],
        "tags": [
          "admin - users"
        ],
        "description": "Delete specific membership of a user.\n\nOnly usable with the API Key provided at server initialization."
      }
    },
    "/admin/namespaces": {
      "get": {
        "summary": "Get all namespaces",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "x-examples": {
                    "Example 1": {
                      "status": {
                        "code": 200,
                        "message": "OK"
                      },
                      "content": {}
                    }
                  },
                  "properties": {
                    "status": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "integer"
                        },
                        "message": {
                          "type": "string"
                        }
                      }
                    },
                    "content": {
                      "$ref": "#/components/schemas/Namespace"
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "get-admin-namespaces",
        "security": [
          {
            "API Key": []
          }
        ],
        "description": "Get all available namespaces.\n\nOnly usable with the API Key provided at server initialization.",
        "tags": [
          "admin - namespaces"
        ]
      },
      "post": {
        "summary": "Add new namespace",
        "operationId": "post-admin-namespaces",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "x-examples": {
                    "Example 1": {
                      "status": {
                        "code": 200,
                        "message": "OK"
                      },
                      "content": {}
                    }
                  },
                  "properties": {
                    "status": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "integer"
                        },
                        "message": {
                          "type": "string"
                        }
                      }
                    },
                    "content": {
                      "$ref": "#/components/schemas/NamespaceFull"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "admin - namespaces"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NamespaceBody"
              }
            }
          }
        },
        "description": "Create a new namespace.\n\nOnly usable with the API Key provided at server initialization.",
        "security": [
          {
            "API Key": []
          }
        ]
      }
    },
    "/admin/namespaces/{id}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "id",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Get specific namespace",
        "tags": [
          "admin - namespaces"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "x-examples": {
                    "Example 1": {
                      "status": {
                        "code": 200,
                        "message": "OK"
                      },
                      "content": {}
                    }
                  },
                  "properties": {
                    "status": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "integer"
                        },
                        "message": {
                          "type": "string"
                        }
                      }
                    },
                    "content": {
                      "$ref": "#/components/schemas/NamespaceFull"
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "get-namespaces-id",
        "security": [
          {
            "API Key": []
          }
        ],
        "description": "Get specific namespace.\n\nOnly usable with the API Key provided at server initialization."
      },
      "put": {
        "summary": "Update specific namespace",
        "operationId": "put-namespaces-id",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "x-examples": {
                    "Example 1": {
                      "status": {
                        "code": 200,
                        "message": "OK"
                      },
                      "content": {}
                    }
                  },
                  "properties": {
                    "status": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "integer"
                        },
                        "message": {
                          "type": "string"
                        }
                      }
                    },
                    "content": {
                      "$ref": "#/components/schemas/NamespaceFull"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "API Key": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NamespaceBody"
              }
            }
          }
        },
        "tags": [
          "admin - namespaces"
        ],
        "description": "Update specific namespace.\n\nOnly usable with the API Key provided at server initialization."
      },
      "delete": {
        "summary": "Delete specific namespace",
        "operationId": "delete-namespaces-id",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "x-examples": {
                    "Example 1": {
                      "status": {
                        "code": 200,
                        "message": "OK"
                      },
                      "content": {}
                    }
                  },
                  "properties": {
                    "status": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "integer"
                        },
                        "message": {
                          "type": "string"
                        }
                      }
                    },
                    "content": {
                      "$ref": "#/components/schemas/NamespaceFull"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "API Key": []
          }
        ],
        "tags": [
          "admin - namespaces"
        ],
        "description": "Delete specific namespace.\n\nOnly usable with the API Key provided at server initialization."
      }
    },
    "/admin/namespaces/{id}/members": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "id",
          "in": "path",
          "required": true
        }
      ],
      "post": {
        "summary": "Add membership of a user",
        "operationId": "post-admin-namespaces-id-members",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "x-examples": {
                    "Example 1": {
                      "status": {
                        "code": 200,
                        "message": "OK"
                      },
                      "content": {}
                    }
                  },
                  "properties": {
                    "status": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "integer"
                        },
                        "message": {
                          "type": "string"
                        }
                      }
                    },
                    "content": {
                      "$ref": "#/components/schemas/NamespaceFull"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "API Key": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/MembershipBody"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "namespace": {
                        "type": "string"
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "tags": [
          "admin - namespaces"
        ],
        "description": "Add membership to a namespace.\n\n**The returned data is the whole namespace (with updated membership).**\n\nOnly usable with the API Key provided at server initialization."
      }
    },
    "/admin/namespaces/{id}/members/{username}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "id",
          "in": "path",
          "required": true
        },
        {
          "schema": {
            "type": "string"
          },
          "name": "username",
          "in": "path",
          "required": true
        }
      ],
      "put": {
        "summary": "Update membership of a user",
        "operationId": "put-admin-namespaces-id-members-username",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "x-examples": {
                    "Example 1": {
                      "status": {
                        "code": 200,
                        "message": "OK"
                      },
                      "content": {}
                    }
                  },
                  "properties": {
                    "status": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "integer"
                        },
                        "message": {
                          "type": "string"
                        }
                      }
                    },
                    "content": {
                      "$ref": "#/components/schemas/NamespaceFull"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "API Key": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MembershipBody"
              }
            }
          }
        },
        "tags": [
          "admin - namespaces"
        ],
        "description": "Update membership to a namespace.\n\n**The returned data is the whole namespace (with updated membership).**\n\nOnly usable with the API Key provided at server initialization."
      },
      "delete": {
        "summary": "Remove membership of a user",
        "operationId": "delete-admin-namespaces-id-members-username",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "x-examples": {
                    "Example 1": {
                      "status": {
                        "code": 200,
                        "message": "OK"
                      },
                      "content": {}
                    }
                  },
                  "properties": {
                    "status": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "integer"
                        },
                        "message": {
                          "type": "string"
                        }
                      }
                    },
                    "content": {
                      "$ref": "#/components/schemas/NamespaceFull"
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Remove membership to a namespace.\n\n**The returned data is the whole namespace (with updated membership).**\n\nOnly usable with the API Key provided at server initialization.",
        "security": [
          {
            "API Key": []
          }
        ],
        "tags": [
          "admin - namespaces"
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "History": {
        "type": "object",
        "x-examples": {
          "Example": {
            "id": "0cc0c0cc-ccc0-00cc-0c00-c0c000000003",
            "taskId": "0000a00a-aaa0-0000-a0aa-000a0a0aa000",
            "type": "generation-success",
            "message": "Rapport \"...\" généré par ...",
            "createdAt": "2022-11-07T15:17:49.000Z",
            "meta": {
              "jobId": "0",
              "jobAdded": "2022-11-07T15:17:40.000Z"
            }
          }
        },
        "description": "Task's history",
        "properties": {
          "id": {
            "type": "string"
          },
          "taskId": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "data": {
            "type": "object",
            "nullable": true
          }
        },
        "required": [
          "id",
          "taskId",
          "type",
          "message"
        ]
      },
      "Task": {
        "type": "object",
        "x-examples": {},
        "description": "Reporting task",
        "x-tags": [
          "task"
        ],
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "description": "Id of the task",
            "readOnly": true
          },
          "name": {
            "type": "string"
          },
          "namespaceId": {
            "type": "string",
            "description": "Institution concerned by the task",
            "readOnly": true
          },
          "recurrence": {
            "type": "string",
            "enum": [
              "DAILY",
              "WEEKLY",
              "MONTHLY",
              "QUARTERLY",
              "BIENNIAL",
              "YEARLY"
            ]
          },
          "nextRun": {
            "type": "string",
            "description": "Next time the task will be run",
            "format": "date-time"
          },
          "lastRun": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "readOnly": true
          },
          "enabled": {
            "type": "boolean",
            "default": true,
            "description": "Is the task enabled"
          },
          "createdAt": {
            "type": "string",
            "description": "Task created at ...",
            "readOnly": true
          },
          "updatedAt": {
            "type": "string",
            "description": "Task last updated at ...",
            "nullable": true,
            "readOnly": true
          }
        },
        "required": [
          "name",
          "recurrence",
          "nextRun"
        ]
      },
      "TaskFull": {
        "type": "object",
        "additionalProperties": false,
        "x-stoplight": {
          "id": "861bb5f8c6893"
        },
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "template": {
            "$ref": "#/components/schemas/TaskTemplate"
          },
          "tagets": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "email"
            }
          },
          "recurrence": {
            "type": "string",
            "enum": [
              "DAILY",
              "WEEKLY",
              "MONTHLY",
              "QUARTERLY",
              "BIENNIAL",
              "YEARLY"
            ]
          },
          "nextRun": {
            "type": "string",
            "format": "date-time"
          },
          "lastRun": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "enabled": {
            "type": "boolean"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "namespace": {
            "$ref": "#/components/schemas/Namespace"
          },
          "history": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/History"
            }
          }
        }
      },
      "TaskBody": {
        "title": "TaskBody",
        "type": "object",
        "additionalProperties": false,
        "x-stoplight": {
          "id": "5b6a061fa181c"
        },
        "properties": {
          "name": {
            "type": "string"
          },
          "template": {
            "$ref": "#/components/schemas/TaskTemplate"
          },
          "tagets": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "email"
            }
          },
          "recurrence": {
            "type": "string",
            "enum": [
              "DAILY",
              "WEEKLY",
              "MONTHLY",
              "QUARTERLY",
              "BIENNIAL",
              "YEARLY"
            ]
          },
          "nextRun": {
            "type": "string",
            "format": "date-time"
          },
          "enabled": {
            "type": "boolean"
          }
        },
        "required": [
          "name",
          "template",
          "tagets",
          "recurrence"
        ]
      },
      "TaskTemplate": {
        "title": "TaskTemplate",
        "x-stoplight": {
          "id": "zc8qc4z6s7cbi"
        },
        "type": "object",
        "properties": {
          "extends": {
            "type": "string"
          },
          "fetchOptions": {
            "type": "object",
            "nullable": true
          },
          "inserts": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ReportLayout"
                },
                {
                  "type": "object",
                  "properties": {
                    "at": {
                      "type": "number"
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "Job": {
        "type": "object",
        "x-examples": {
          "example-1": {
            "id": "0",
            "data": {
              "...": "..."
            },
            "progress": 1,
            "added": "2022-11-15T11:01:33.179Z",
            "started": "2022-11-15T11:01:33.184Z",
            "ended": "2022-11-15T11:01:38.320Z",
            "attempts": 1,
            "status": "completed"
          }
        },
        "properties": {
          "id": {
            "type": "string"
          },
          "data": {
            "type": "object",
            "properties": {
              "task": {
                "$ref": "#/components/schemas/TemplateFull"
              },
              "origin": {
                "type": "string"
              },
              "writeHistory": {
                "type": "boolean"
              },
              "debug": {
                "type": "boolean"
              }
            }
          },
          "result": {
            "type": "object"
          },
          "progress": {
            "type": "integer"
          },
          "added": {
            "type": "string"
          },
          "started": {
            "type": "string"
          },
          "ended": {
            "type": "string"
          },
          "attempts": {
            "type": "integer"
          },
          "status": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "data",
          "added",
          "attempts",
          "status"
        ]
      },
      "Cron": {
        "type": "object",
        "x-examples": {
          "Example": {
            "name": "daily-report",
            "running": true,
            "nextRun": "2022-11-16T09:10:00.000Z",
            "lastRun": "2022-11-16T09:09:59.000Z"
          }
        },
        "description": "Cron job info",
        "properties": {
          "name": {
            "type": "string"
          },
          "running": {
            "type": "boolean"
          },
          "nextRun": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "lastRun": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        }
      },
      "Pong": {
        "x-examples": {
          "Example": {
            "name": "ezreeprt-report",
            "status": true,
            "time": 3
          }
        },
        "description": "Response to a ping/health check",
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "status": {
            "type": "boolean"
          },
          "elapsedTime": {
            "type": "integer"
          },
          "statusCode": {
            "type": "integer",
            "nullable": true
          },
          "error": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "status"
        ]
      },
      "Membership": {
        "title": "Membership",
        "x-stoplight": {
          "id": "cgw95jeoewcwi"
        },
        "type": "object",
        "properties": {
          "access": {
            "type": "string",
            "enum": [
              "READ",
              "READ_WRITE",
              "SUPER_USER"
            ]
          },
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          },
          "namespace": {
            "$ref": "#/components/schemas/Namespace"
          }
        }
      },
      "MembershipBody": {
        "type": "object",
        "x-examples": {
          "Example 1": {
            "namespace": "b877ca11-2227-46a6-84e9-883b22e3140e",
            "access": "READ_WRITE"
          }
        },
        "properties": {
          "access": {
            "type": "string",
            "enum": [
              "READ",
              "READ_WRITE",
              "SUPER_USER"
            ]
          }
        }
      },
      "Namespace": {
        "title": "Namespace",
        "x-stoplight": {
          "id": "69bji1pmw43zv"
        },
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "logoId": {
            "type": "string"
          },
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          }
        }
      },
      "NamespaceFull": {
        "type": "object",
        "x-examples": {
          "Example 1": {
            "id": "681d7a77-9551-4466-a48f-4a5e7f57d7d4",
            "name": "Test3 Dev",
            "fetchLogin": {},
            "fetchOptions": {},
            "logoId": null,
            "createdAt": "2023-04-11T13:49:06.535Z",
            "updatedAt": "2023-04-11T13:49:06.535Z",
            "memberships": [],
            "tasks": []
          }
        },
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "fetchLogin": {
            "type": "object"
          },
          "fetchOptions": {
            "type": "object"
          },
          "logoId": {
            "nullable": true
          },
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          },
          "memberships": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "username": {
                  "type": "string"
                },
                "access": {
                  "type": "string",
                  "enum": [
                    "READ",
                    "READ_WRITE",
                    "SUPER_USER"
                  ]
                },
                "createdAt": {
                  "type": "string",
                  "format": "date-time"
                },
                "updatedAt": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          "tasks": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Task"
              },
              {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "targets": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "email"
                    }
                  },
                  "template": {
                    "$ref": "#/components/schemas/TaskTemplate"
                  }
                }
              }
            ]
          }
        }
      },
      "NamespaceBody": {
        "type": "object",
        "x-examples": {
          "Example 1": {
            "name": "Test2 Dev",
            "fetchLogin": {},
            "fetchOptions": {}
          }
        },
        "properties": {
          "name": {
            "type": "string"
          },
          "fetchLogin": {
            "type": "object"
          },
          "fetchOptions": {
            "type": "object"
          },
          "logoId": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "fetchLogin",
          "fetchOptions"
        ]
      },
      "Queue": {
        "title": "Queue",
        "x-stoplight": {
          "id": "ukq73kbfu4p6d"
        },
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "active",
              "paused"
            ]
          }
        }
      },
      "Template": {
        "title": "Template",
        "x-stoplight": {
          "id": "gadmdr9m2pb87"
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "name": {
            "type": "string"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "color": {
                  "type": "string",
                  "nullable": true
                }
              }
            }
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "renderer": {
            "type": "string"
          },
          "pageCount": {
            "type": "number"
          }
        }
      },
      "TemplateFull": {
        "title": "TemplateFull",
        "x-stoplight": {
          "id": "f249696c2d47f"
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "name": {
            "type": "string"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "color": {
                  "type": "string",
                  "nullable": true
                }
              }
            }
          },
          "body": {
            "$ref": "#/components/schemas/ReportTemplate"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "renderer": {
            "type": "string"
          },
          "pageCount": {
            "type": "number"
          }
        }
      },
      "TemplateBody": {
        "title": "TemplateBody",
        "x-stoplight": {
          "id": "bbc96ab4f9875"
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "tags": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "color": {
                  "type": "string",
                  "nullable": true
                }
              }
            }
          },
          "body": {
            "$ref": "#/components/schemas/ReportTemplate"
          }
        }
      },
      "ReportTemplate": {
        "title": "ReportTemplate",
        "x-stoplight": {
          "id": "ioqkkh3sl06p9"
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "layouts": {
            "$ref": "#/components/schemas/ReportLayout"
          },
          "fetchOptions": {
            "type": "object"
          },
          "renderer": {
            "type": "string",
            "nullable": true
          },
          "renderOptions": {
            "type": "object"
          }
        }
      },
      "ReportLayout": {
        "title": "ReportLayout",
        "x-stoplight": {
          "id": "13fa278fffb4e"
        },
        "type": "object",
        "description": "Layout info. Can have more properties",
        "x-examples": {
          "Example": {
            "name": "basic",
            "renderer": "vega-pdf",
            "pageCount": 6
          }
        },
        "additionalProperties": false,
        "properties": {
          "data": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "array",
                "items": {}
              },
              {
                "type": "string"
              }
            ]
          },
          "fetcher": {
            "type": "string",
            "nullable": true
          },
          "fetchOptions": {
            "type": "object"
          },
          "figures": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReportFigure"
            }
          }
        },
        "required": [
          "figures"
        ]
      },
      "ReportFigure": {
        "title": "ReportFigure",
        "x-stoplight": {
          "id": "b0c34fa35eb7c"
        },
        "type": "object",
        "description": "Reporting figure",
        "additionalProperties": false,
        "properties": {
          "type": {
            "type": "string",
            "description": "Type of figure"
          },
          "data": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "oneOf": [
                    {
                      "type": "object"
                    },
                    {
                      "type": "array",
                      "items": {}
                    },
                    {
                      "type": "string"
                    },
                    {
                      "type": "number"
                    }
                  ]
                }
              }
            ]
          },
          "slots": {
            "type": "array",
            "description": "Slot used by figure",
            "items": {
              "type": "number"
            }
          }
        },
        "required": [
          "type",
          "data"
        ]
      },
      "User": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string"
          },
          "token": {
            "type": "string"
          },
          "isAdmin": {
            "type": "boolean"
          },
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          }
        },
        "x-examples": {
          "Example 1": {
            "username": "ezr-admin",
            "token": "3OSXlaYcSRK/SYmyVvbt9l5no+72HIYnGY5F04obq8ICJXv+GK1vzeB8TS5OIUyQFt6d/WQIH9aD3TedC+vT15H3mjvfNYPJtR0cVA1eGgu40qwhihx3YvfUDdNz3oktJBb+UpU6uqHXroKLJxPvpa5Vi1q2C4dUVt4pwA==",
            "isAdmin": true,
            "createdAt": "2023-04-11T13:47:00.072Z",
            "updatedAt": "2023-04-11T13:47:00.072Z"
          }
        }
      },
      "UserFull": {
        "type": "object",
        "x-examples": {
          "Example 1": {
            "username": "ezr-admin",
            "token": "3OSXlaYcSRK/SYmyVvbt9l5no+72HIYnGY5F04obq8ICJXv+GK1vzeB8TS5OIUyQFt6d/WQIH9aD3TedC+vT15H3mjvfNYPJtR0cVA1eGgu40qwhihx3YvfUDdNz3oktJBb+UpU6uqHXroKLJxPvpa5Vi1q2C4dUVt4pwA==",
            "isAdmin": true,
            "createdAt": "2023-04-11T13:47:00.072Z",
            "updatedAt": "2023-04-11T13:47:00.072Z",
            "memberships": []
          }
        },
        "properties": {
          "username": {
            "type": "string"
          },
          "token": {
            "type": "string"
          },
          "isAdmin": {
            "type": "boolean"
          },
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          },
          "memberships": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Membership"
            }
          }
        }
      },
      "UserBody": {
        "type": "object",
        "properties": {
          "isAdmin": {
            "type": "boolean"
          }
        },
        "x-examples": {
          "Example 1": {
            "isAdmin": true
          }
        }
      }
    },
    "securitySchemes": {
      "User Token": {
        "type": "http",
        "scheme": "bearer",
        "description": "Used by user to interact with service"
      },
      "API Key": {
        "name": "X-API-Key",
        "type": "apiKey",
        "in": "header",
        "description": "Used by linked application to manage service"
      }
    },
    "requestBodies": {},
    "responses": {
      "400": {
        "description": "Bad Request",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "content": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              },
              "x-examples": {
                "example-1": {
                  "status": {
                    "code": 400,
                    "message": "Bad Request"
                  },
                  "content": {
                    "message": "JWT malformed: invalid signature"
                  }
                }
              }
            },
            "examples": {
              "Example": {
                "value": {
                  "status": {
                    "code": 400,
                    "message": "Bad Request"
                  },
                  "content": {
                    "message": "..."
                  }
                }
              }
            }
          }
        }
      },
      "401": {
        "description": "Unauthorized",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "content": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              },
              "x-examples": {
                "example-1": {
                  "status": {
                    "code": 401,
                    "message": "Unauthorized"
                  },
                  "content": {
                    "message": "'GET /users/' requires auth"
                  }
                }
              }
            },
            "examples": {
              "Example": {
                "value": {
                  "status": {
                    "code": 401,
                    "message": "Unauthorized"
                  },
                  "content": {
                    "message": "'...' requires auth"
                  }
                }
              }
            }
          }
        }
      },
      "403": {
        "description": "Forbidden",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "content": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              },
              "x-examples": {
                "example-1": {
                  "status": {
                    "code": 403,
                    "message": "Forbidden"
                  },
                  "content": {
                    "message": "User 'user' doesn't have the rights to acces to 'GET /users/'"
                  }
                }
              }
            },
            "examples": {
              "Example": {
                "value": {
                  "status": {
                    "code": 403,
                    "message": "Forbidden"
                  },
                  "content": {
                    "message": "User '...' doesn't have the rights to access to '...'"
                  }
                }
              }
            }
          }
        }
      },
      "404": {
        "description": "Not found",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "content": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              },
              "x-examples": {
                "example-1": {
                  "status": {
                    "code": 404,
                    "message": "Not Found"
                  },
                  "content": {
                    "message": "User 'testa' not found"
                  }
                }
              }
            },
            "examples": {
              "Example": {
                "value": {
                  "status": {
                    "code": 404,
                    "message": "Not Found"
                  },
                  "content": {
                    "message": "... '...' not found"
                  }
                }
              }
            }
          }
        }
      },
      "409": {
        "description": "Example response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "content": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              },
              "x-examples": {
                "example-1": {
                  "status": {
                    "code": 409,
                    "message": "Conflict"
                  },
                  "content": {
                    "message": "Task with id 'af549626-641b-44ed-9381-f3b751370164' is already disabled"
                  }
                }
              }
            },
            "examples": {
              "Example": {
                "value": {
                  "status": {
                    "code": 409,
                    "message": "Conflict"
                  },
                  "content": {
                    "message": "..."
                  }
                }
              }
            }
          }
        }
      },
      "500": {
        "description": "Internal Server Error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "content": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              },
              "x-examples": {
                "example-1": {
                  "status": {
                    "code": 500,
                    "message": "Internal Server Error"
                  },
                  "content": {
                    "message": "Unexpected token v in JSON at position 0"
                  }
                }
              }
            },
            "examples": {
              "Example": {
                "value": {
                  "status": {
                    "code": 500,
                    "message": "Internal Server Error"
                  },
                  "content": {
                    "message": "..."
                  }
                }
              }
            }
          }
        }
      }
    },
    "parameters": {
      "previous": {
        "name": "previous",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string",
          "example": "0000a00a-aaa0-0000-a0aa-000a0a0aa000"
        },
        "description": "Previous id of the last request"
      },
      "count": {
        "name": "count",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string",
          "pattern": "^[0-9]+",
          "default": "15"
        },
        "description": "Count of object to return"
      },
      "namespaces": {
        "name": "namespaces",
        "in": "query",
        "required": false,
        "schema": {
          "type": "array",
          "example": [
            "aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee",
            "aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee"
          ]
        },
        "description": "Select wich namespaces are concerned by the request. If none it will select all possible namespaces."
      }
    }
  },
  "tags": [
    {
      "name": "admin - namespaces"
    },
    {
      "name": "admin - users"
    },
    {
      "name": "auth"
    },
    {
      "name": "cron"
    },
    {
      "name": "health"
    },
    {
      "name": "history"
    },
    {
      "name": "queue"
    },
    {
      "name": "report"
    },
    {
      "name": "tasks"
    },
    {
      "name": "templates"
    },
    {
      "name": "unsubscribe"
    }
  ]
}