// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// TODO: rename to Report
model Task {
  id          String     @id @default(uuid())
  name        String
  namespaceId String
  namespace   Namespace  @relation(fields: [namespaceId], references: [id], onDelete: Cascade)
  template    Json
  targets     String[]
  recurrence  Recurrence
  nextRun     DateTime
  lastRun     DateTime?
  enabled     Boolean    @default(true)
  history     History[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime?  @updatedAt

  @@index([namespaceId])
}

enum Recurrence {
  DAILY
  WEEKLY
  MONTHLY
  QUARTERLY
  BIENNIAL
  YEARLY
}

model History {
  id        String   @id @default(uuid())
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId    String
  type      String
  message   String
  data      Json?
  createdAt DateTime @default(now())
}

model User {
  username    String       @id
  token       String       @unique
  isAdmin     Boolean      @default(false)
  memberships Membership[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime?    @updatedAt

  @@index([token])
}

model Membership {
  username    String
  user        User      @relation(fields: [username], references: [username], onDelete: Cascade)
  namespaceId String
  namespace   Namespace @relation(fields: [namespaceId], references: [id], onDelete: Cascade)
  access      Access
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt

  @@id([username, namespaceId])
}

enum Access {
  READ
  READ_WRITE
  SUPER_USER
}

model Namespace {
  id           String       @id @default(uuid())
  name         String
  fetchLogin   Json
  fetchOptions Json
  logoId       String?
  memberships  Membership[]
  tasks        Task[]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime?    @updatedAt
}

model Template {
  name      String    @id
  body  Json
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}
